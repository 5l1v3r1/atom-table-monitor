{
  "name": "Atom-table-monitor",
  "tagline": "Monitoring tool for global atom table and RegisterWindowMessage identifiers",
  "body": "Monitoring tool for global atom table and RegisterWindowMessage identifiers.\r\n==============\r\n\"An atom table is a system-defined table that stores strings and corresponding identifiers. An application places a string in an atom table and receives a 16-bit integer, called an atom, that can be used to access the string. A string that has been placed in an atom table is called an atom name\"\r\n--------------\r\n\r\n**Source**: [Microsoft - About Atom tables](http://msdn.microsoft.com/en-us/library/windows/desktop/ms649053(v=vs.85).aspx)\r\n\r\nWith ATOM table Monitor, all created atoms using [RegisterClass](http://msdn.microsoft.com/en-us/library/windows/desktop/ms633586(v=vs.85).aspx), [RegisterClassEx](http://msdn.microsoft.com/en-us/library/windows/desktop/ms633587(v=vs.85).aspx), [GlobalAddAtom](http://msdn.microsoft.com/en-us/library/windows/desktop/ms649060(v=vs.85).aspx), [AddAtom](http://msdn.microsoft.com/en-us/library/windows/desktop/ms649056(v=vs.85).aspx) or identifiers from [RegisterWindowMessage](http://msdn.microsoft.com/en-us/library/windows/desktop/ms644947(v=vs.85).aspx) functions can be monitored and be sure our applications are not leaking Atoms / identifiers.\r\n\r\n[![Downloads](https://img.shields.io/badge/downloads-3k-blue.svg)](https://app.box.com/s/tbmze7klz6j3astnviygwrgkdi4fu7ft) [![Stable Release](https://img.shields.io/badge/version-1.4-blue.svg)](https://app.box.com/s/tbmze7klz6j3astnviygwrgkdi4fu7ft) [![License](https://img.shields.io/badge/license-BSD-blue.svg)](https://app.box.com/s/tbmze7klz6j3astnviygwrgkdi4fu7ft) [![Delphi version](https://img.shields.io/badge/delphi-xe-red.svg)](https://app.box.com/s/tbmze7klz6j3astnviygwrgkdi4fu7ft)\r\n\r\n**Related Articles:**\r\n  - [Monitoring Global Atom table part I](http://thundaxsoftware.blogspot.com/2012/02/monitoring-global-atom-table-part-i.html)\r\n  - [Monitoring Global Atom table part II](http://thundaxsoftware.blogspot.com/2012/02/monitoring-global-atom-table-part-ii.html)\r\n  - [Monitoring Global Atom table part III](http://thundaxsoftware.blogspot.com/2012/02/monitoring-global-atom-table-part-iii.html)\r\n\r\n**Features:**\r\n  - Monitor Global atom entries from 0xC000 to 0xFFFF using [GlobalGetAtomName](http://msdn.microsoft.com/en-us/library/windows/desktop/ms649063(v=vs.85).aspx).\r\n  - Monitor RegisterWindowMessage atom entries (identifiers) from 0xC000 to 0xFFF using [GetClipboardFormatName](http://msdn.microsoft.com/en-us/library/windows/desktop/ms649040(v=vs.85).aspx).\r\n  - Memory displayed in a nice way using a memory grid.\r\n  - Match pattern using regular expressions.\r\n  - Graph displaying current values.\r\n  - Testing table entries using GlobalAddAtom and RegisterWindowMessage functions.\r\n  - Monitoring user session atoms and Service session atoms.\r\n\r\n**Notes:**\r\n  - It uses **C:\\** drive for internal use as it is hard-coded. (Be sure you have that drive in your system)\r\n\r\n**Global atom table:**\r\n![](http://4.bp.blogspot.com/-D6tRXUP7M0M/T0LAwZpBEWI/AAAAAAAAC5s/DxauJez7r3M/s1600/monitor1.jpg)\r\n**RegisterWindowMessage table:**\r\n![](http://4.bp.blogspot.com/-Ra7SgHtpfEk/T0LAyP_Tm4I/AAAAAAAAC50/t2P3rgKyNzw/s1600/monitor2.jpg)\r\n**Display list of entries:**\r\n![](http://2.bp.blogspot.com/--MXjyf2Uy64/T0LA0mwkGrI/AAAAAAAAC58/lQjr1O8WVNo/s1600/monitor3.jpg)\r\n**Matching string patterns:**\r\n![](http://4.bp.blogspot.com/-o8E5rBf5s4Y/T0LA2JJj0pI/AAAAAAAAC6E/jId5MN2Yq8U/s1600/monitor4.jpg)\r\n**Counters:**\r\n![](http://1.bp.blogspot.com/-0w8YllG0ahk/T0LA3k-j-zI/AAAAAAAAC6M/YuVWBHP_eWc/s1600/monitor5.jpg)\r\n**Test screen:**\r\n![](http://2.bp.blogspot.com/-78qn1E24k1g/T0LA4_FeFvI/AAAAAAAAC6U/jAihiSGuF4Y/s1600/monitor6.jpg)\r\n**Session screen selection:**\r\n![](http://3.bp.blogspot.com/-wMA0s0HxjXI/T0k1SI7ENjI/AAAAAAAAC6s/26_L_TuX8Ec/s1600/v1.4Service.png)\r\n**Monitoring Service session atoms:**\r\n![](http://3.bp.blogspot.com/-RIsOXSEw4BU/T0k3K7DJ5tI/AAAAAAAAC60/ehV0fBX2RQ0/s1600/v1.4RWM.png)\r\n\r\n**Scan Atoms method:**\r\n```delphi\r\nprocedure ScanAtoms;\r\nvar\r\n  i: word;\r\n  cstrAtomName: array [0 .. 1024] of char;\r\n  cstrRWMName: array [0 .. 1024] of char;\r\n  AtomName, RWMName: string;\r\n  len, lenRWM: integer;\r\n  Value: string;\r\n  countAtom, countRWM: integer;\r\nbegin\r\n  countAtom := 0;\r\n  countRWM := 0;\r\n  for i := $C000 to $FFFF do\r\n  begin\r\n    Value := '';\r\n    len := GlobalGetAtomName(i, cstrAtomName, 1024);\r\n    lenRWM := GetClipboardFormatName(i, cstrRWMName, 1024);\r\n    if len > 0 then\r\n    begin\r\n      AtomName := StrPas(cstrAtomName);\r\n      SetLength(AtomName, len);\r\n      Value := AtomName;\r\n      Inc(countAtom);\r\n      FATomTable[i - $C000].atom[0] := Value + '  --GlobalAtom';\r\n    end;\r\n    if lenRWM > 0 then\r\n    begin\r\n      RWMName := StrPas(cstrRWMName);\r\n      SetLength(RWMName, lenRWM);\r\n      Value := RWMName;\r\n      Inc(countRWM);\r\n      FATomTable[i - $C000].atom[1] := Value + '  --RWM';\r\n    end;\r\n  end;\r\nend;\r\n```\r\n\r\n**Using regular expressions:**\r\n```delphi\r\nfunction GetColor(Text: string): TColor;\r\n  var\r\n    i: integer;\r\n    perl: TPerlRegEx;\r\n    res: TColor;\r\n  begin\r\n    res := clGray;\r\n    for i := 0 to FListPatterns.count - 1 do\r\n    begin\r\n      perl := TPerlRegEx.Create;\r\n      try\r\n        perl.RegEx := UTF8String(FListPatterns[i].RegularEx);\r\n        perl.Subject := UTF8String(Text);\r\n        if perl.Match then\r\n        begin\r\n          res := FListPatterns[i].color;\r\n          Break;\r\n        end;\r\n      finally\r\n        perl.Free;\r\n      end;\r\n    end;\r\n    result := res;\r\n  end;\r\n```\r\n\r\n**Testing:**\r\n```delphi\r\nprocedure AddatomClick(Sender: TObject);\r\nvar\r\n  i: integer;\r\nbegin\r\n  try\r\n    GlobalAddAtom(PChar(getRandomString(Edit4.Text)));\r\n    if GetLastError <> 0 then\r\n    begin\r\n      ShowMessage(IntToStr(GetLastError) + ' ' + SysErrorMessage(GetLastError));\r\n      Break;\r\n    end;\r\n  Except\r\n    on e: exception do\r\n      ShowMessage(e.message + ' ' + IntToStr(GetLastError));\r\n  end;\r\nend;\r\n\r\nprocedure RWMAddAtom(Sender: TObject);\r\nvar\r\n  i: integer;\r\n  myString: string;\r\nbegin\r\n  myString := getRandomString(Edit8.Text);\r\n  try\r\n    RegisterWindowMessage(PWideChar(myString));\r\n    if GetLastError <> 0 then\r\n    begin\r\n      ShowMessage(IntToStr(GetLastError) + ' ' + SysErrorMessage(GetLastError));\r\n      Break;\r\n    end;\r\n  Except\r\n    on e: exception do\r\n      ShowMessage(e.message + ' ' + IntToStr(GetLastError));\r\n  end;\r\nend;\r\n\r\nfunction getRandomString(header: string): string;\r\nconst\r\n  Chars = '1234567890ABCDEFGHJKLMNPQRSTUVWXYZ!?/*+-';\r\nvar\r\n  S: string;\r\n  i, N: integer;\r\nbegin\r\n  Randomize;\r\n  S := '';\r\n  for i := 1 to 6 do\r\n  begin\r\n    N := Random(Length(Chars)) + 1;\r\n    S := S + Chars[N];\r\n  end;\r\n  result := header + S;\r\nend;\r\n```\r\n\r\n**Testing using RegisterClassEx**\r\n```delphi\r\nprocedure btnCreateClick(Sender: TObject);\r\nvar\r\n  WC: TWndclassEx;\r\n  atom: word;\r\nbegin\r\n  WC.lpszclassName := PWideChar(Edit10.Text);\r\n  WC.cbSize := SizeOf(TWndclassEx);\r\n  WC.style := CS_VREDRAW or CS_HREDRAW;\r\n  WC.lpfnWndProc := @DefWindowProc;\r\n  WC.cbClsExtra := 0;\r\n  WC.cbWndExtra := 0;\r\n  WC.hinstance := hinstance;\r\n  WC.hIcon := Application.Icon.Handle;\r\n  WC.hIconSm := Application.Icon.Handle;\r\n  WC.hCursor := LoadCursor(0, IDC_ARROW);\r\n  WC.lpszMenuName := nil;\r\n  WC.hbrBackground := (COLOR_BACKGROUND + 1);\r\n\r\n  atom := RegisterClassEx(WC);\r\n  if atom <> 0 then\r\n    ShowMessage('Atom Created at ' + IntToHex(atom, 4));\r\nend;\r\n```\r\n\r\n**Tested under:**\r\n  - Windows Xp, Vista, 7, Server 2003, Server 2008\r\n\r\n**Developed under:**\r\n  - Delphi 2010\r\n\r\n**StackOverflow entry:**\r\n  - [System Error. Code: 8. Not enough storage is available to process this command](http://stackoverflow.com/questions/507853/system-error-code-8-not-enough-storage-is-available-to-process-this-command/9066509#9066509)\r\n\r\n**Microsoft Debug Blog entry:**\r\n  - [Identifying global atom table leaks](http://blogs.msdn.com/b/ntdebugging/archive/2012/01/31/identifying-global-atom-table-leaks.aspx).\r\n\r\n## Sponsors\r\nNo sponsors yet! Will you be the first?\r\n\r\n[![PayPayl donate button](https://img.shields.io/badge/paypal-donate-yellow.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=L5FCF6LX5C9AW \"Donate once-off to this project using Paypal\")\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}